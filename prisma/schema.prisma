// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  email     String   @unique
  password  String
  photo     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vehicles Vehicle[]
}

model Vehicle {
  id          Int      @id @default(autoincrement())
  userId      Int
  photo       String?
  brand       String
  model       String
  plateNumber String   @unique
  year        Int
  currentKm   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  services         ServiceRecord[]
  reminderSettings ReminderSetting[]
}

model ServiceRecord {
  id           Int      @id @default(autoincrement())
  vehicleId    Int
  serviceTitle String
  serviceDate  DateTime
  odometerKm   Int
  workshop     String
  cost         Int
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model ReminderSetting {
  id              Int          @id @default(autoincrement())
  vehicleId       Int
  type            ReminderType
  thresholdKm     Int?
  thresholdDays   Int?
  lastServiceDate DateTime?
  lastServiceKm   Int?
  nextDueKm       Int?

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@unique([vehicleId, type])
}

enum ReminderType {
  km
  time
}
